{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-codelogium","title":"Welcome to Codelogium \ud83e\udde0","text":"<p>Where true craftsmanship lasts. Unlearn. Relearn. Keep learning.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This space is my digital notepad, my logium, my messy mind organized \u2014 or at least trying to be.</p> <p>I often dive deep into tech topics, sometimes bounce around \u2014 discovering new passions or revisiting old ones. Despite all the tools out there, I still love good old paper, notebooks, pens, and pencils.</p> <p>But hey, why not digitize it?</p> <p>Thus, Codelogium was born: A simple space for my notes, thoughts, ideas, and learnings in the world of code.</p>"},{"location":"#whats-inside","title":"What's Inside?","text":"<p>Well\u2026 probably nothing revolutionary.</p> <p>But here\u2019s what you might stumble upon:</p> <ul> <li>\ud83d\ude80 Java &amp; Spring (Boot, Security, REST...)</li> <li>\ud83d\udc0d Python &amp; FastAPI</li> <li>\ud83e\udde0 Databases (SQL, ORM, H2, Postgres...)</li> <li>\ud83c\udf10 Networking basics &amp; useful concepts</li> <li>\ud83d\udcda Books, ideas, random sparks of inspiration</li> <li>\ud83e\uddea Experiments, drafts, projects-in-progress</li> </ul> <p>And maybe more... or less. Depends on the day \ud83d\ude04</p>"},{"location":"#just-one-promise","title":"Just One Promise","text":"<p>No boring stuff (hopefully). This is more of a log than a guide \u2014 raw, honest, sometimes chaotic.</p> <p>\u201cNote-taking is thinking made visible.\u201d \u2014 Codelogium philosophy</p>"},{"location":"#sections","title":"Sections","text":"<ul> <li>\ud83d\uddc3\ufe0f Databases</li> <li>\u2615 Java</li> <li>\ud83c\udf31 Spring</li> <li>\ud83d\udcdd Blog</li> </ul> <p>Codelogium is my digital workshop \u2014 where I log, learn, and sometimes rant about dev life.</p>"},{"location":"blog/","title":"\ud83d\udcdd Blog","text":"<p>Welcome to the Blog \u2014 the free zone. Here, you\u2019ll find posts that don\u2019t quite fit under a specific tech category. It could be ideas, books, tools, random findings, or digital brain dumps.</p>"},{"location":"blog/#posts","title":"Posts","text":"<ul> <li> <p>Random Thought Some spontaneous thoughts that might (or might not) make sense.</p> </li> <li> <p>Things I Learned A growing list of small lessons, aha-moments, or reminders to my future self.</p> </li> </ul> <p>Not all who wander are lost \u2014 some are just debugging.</p>"},{"location":"blog/random-thought/","title":"Random Thoughts","text":"<p>Sometimes, the best ideas come from quiet moments of reflection.</p> <p>\"You don\u2019t have to see the whole staircase, just take the first step.\" \u2013 Martin Luther King Jr.</p> <p>Whether it's thinking about code, life, or the random beauty of a sunset, these thoughts often lead to inspiration.</p>","tags":["Thoughts","Life","Reflection"]},{"location":"blog/random-thought/#a-thought-on-learning","title":"A Thought on Learning","text":"<p>Learning never truly ends. Every conversation, project, or mistake is a new lesson in disguise.</p>","tags":["Thoughts","Life","Reflection"]},{"location":"blog/random-thought/#a-thought-on-simplicity","title":"A Thought on Simplicity","text":"<p>The simpler the solution, the more elegant the result. Complexity rarely equals clarity.</p> <p>This post is part of an ongoing experiment in writing regularly.</p>","tags":["Thoughts","Life","Reflection"]},{"location":"blog/post/database/hibernate-tips/","title":"Hibernate Tips","text":"","tags":["Java","Generics"]},{"location":"blog/post/database/postgres-vs-h2/","title":"Postgres vs H2","text":"","tags":["Java","Generics"]},{"location":"blog/post/java/generic-types/","title":"Generic Types in Java","text":"By \u2014Al-Fahami Toihir  \ud83c\udff7\ufe0f\u00a0Java\u00a0\u2022\u00a0            Programming\u00a0\u2022\u00a0           OOP\u00a0\u2022\u00a0        \u23f1\ufe0f ~5 min read <p>\u201cWrite once, use many\u201d \u2014 Generics let you write flexible and reusable code.</p> <p>In a nutshell, Generic Types let you define interfaces, classes, or methods using a placeholder type that you specify later when calling or instantiating them. This is common in Java Collections, like <code>List&lt;String&gt; quotes</code>, <code>ArrayList&lt;Integer&gt;</code>, or <code>Map&lt;Long, String&gt; identifier</code>.</p> Loosely Speaking <p>When using a single letter (e.g., <code>&lt;T&gt;</code>, <code>&lt;E&gt;</code>, or <code>&lt;K, V&gt;</code>) in <code>public interface &lt;T&gt; GenericInterface {}</code>, <code>public class GenericClass&lt;T&gt; {}</code>, or <code>public &lt;T&gt; genericMethod() {}</code>, you're essentially telling the user of your generic interface, class, or method that they can use any type they wish when instantiating it \u2014 even a custom type they create themselves.</p> <p>In simple terms, generics let you write a class or method that can operate on objects of various types \u2014 like <code>Integer</code>, <code>String</code>, or even your own custom classes \u2014 without rewriting the code for each type.</p> <p>Generics in Java allow you to write code that works with different data types while still being type-safe. They reduce boilerplate, prevent runtime errors like <code>ClassCastException</code>, and make your code easier to read and maintain.</p> <p>According to the official Java documentation:</p> A generic type is a generic class or interface that is parameterized over types. <p>You typically use a generic class when all its behavior (like its methods) should apply consistently to a single data type. A great example? Most of the Java Collections Framework \u2014 like <code>ArrayList&lt;T&gt;</code> and <code>HashMap&lt;K, V&gt;</code> \u2014 are built with generics.</p> <p>In a generic class, you usually use a type parameter (like <code>T</code>) to represent the data type. This makes it possible to write flexible and reusable code that works with any type: <code>Integer</code>, <code>String</code>, <code>Double</code>, <code>Character</code>, or even user-defined types.</p>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#generic-classes","title":"Generic Classes","text":"<p>In generic classes, static methods cannot use class-level type parameters.</p> <p>Here\u2019s a simple generic class called <code>Box</code>:</p> <pre><code>public class Box&lt;T&gt; {\n    // T can be any type (Integer, String, Object, etc.)\n    private T value;\n\n    public void set(T value) {\n        this.value = value;\n    }\n\n    public T get() {\n        return value;\n    }\n}\n</code></pre> <p>This <code>Box</code> class can hold any type of object. For example:</p> <pre><code>Box&lt;String&gt; stringBox = new Box&lt;&gt;();\nstringBox.set(\"Hello\");\n\nBox&lt;Integer&gt; intBox = new Box&lt;&gt;();\nintBox.set(123);\n</code></pre> Quite a Stretch <p>Imagine a strong iron box that can hold any kind of item \u2014 even ones crafted by the user themselves.</p> <p>Now let\u2019s stretch that idea a bit further...</p> <p>What if this box could hold another box just like it? Could it nest within itself, over and over?</p> <p>The answer is: yes! That\u2019s the idea behind recursive generics \u2014 a container that can hold its own kind. (But don\u2019t worry \u2014 we won\u2019t dive into that here.)</p>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#generic-methods","title":"Generic Methods","text":"<p>You can also create generic methods that work independently of any class being generic:</p> <pre><code>public static class Utility {\n    public static &lt;T&gt; void printArray(T[] array) {\n        for (T element : array) {\n            System.out.print(element + \" \");\n        }\n    }\n}\n</code></pre> <p>You could call this method with different types of arrays:</p> <pre><code>Integer[] intArray = {1, 2, 3};\nString[] stringArray = {\"a\", \"b\", \"c\"};\n\nUtility.printArray(intArray);\nUtility.printArray(stringArray);\n</code></pre> <p>Why Generics Matter</p> <p>Generics catch type mismatches at compile time, helping you avoid <code>ClassCastException</code> errors and making your code more reliable.</p>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#advanced-uses-of-generics-in-java","title":"Advanced Uses of Generics in Java","text":"","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#generic-interfaces","title":"Generic Interfaces","text":"<p>Generics improve type safety and code reusability, ensuring compile-time checks and reducing runtime errors. You can define generic interfaces to operate on various types, improving flexibility and reuse:</p> <pre><code>public interface InnerGenericType&lt;T&gt; {\n    void save(T entity);\n    T findByIndex(int id);\n}\n</code></pre>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#implementing-a-generic-interface","title":"Implementing a Generic Interface","text":"<pre><code>public class Utilisateur {\n    private int id;\n    private String username;\n\n    public String getUsername() { return username; }\n    public int getId() { return id; }\n    public void setUsername(String username) { this.username = username; }\n    public void setId(int id) { this.id = id; }\n}\n\npublic class UserRepository implements InnerGenericType&lt;Utilisateur&gt; {\n    ArrayList&lt;Utilisateur&gt; userRepository = new ArrayList&lt;&gt;();\n\n    @Override\n    public void save(Utilisateur user) {\n        userRepository.add(user);\n    }\n\n    @Override\n    public Utilisateur findByIndex(int id) {\n        return userRepository.get(id);\n    }\n}\n</code></pre>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#using-e-for-element-in-a-custom-collection","title":"Using <code>E</code> for Element in a Custom Collection","text":"<p>Adding  in the class defintion defines the class as generic. The class can operate on objects of any type specified when the class is instantiated, rather than being tied to a specific type. E is a placeholder for the type you will specify later when using the class. Java needs  in the class definition to treat E as a valid type parameter. Otherwise, it assumes E is a class or type that hasn't been defined. <pre><code>public class CustomList&lt;E&gt; {\n    private List&lt;E&gt; elements = new ArrayList&lt;&gt;();\n\n    public void setElement(E element) {\n        elements.add(element);\n    }\n\n    public E getElement(int index) {\n        return elements.get(index);\n    }\n}\n</code></pre> <p>This allows storage of elements of any type defined at the time of instantiation.</p>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#using-k-and-v-in-a-key-value-pair","title":"Using <code>K</code> and <code>V</code> in a Key-Value Pair","text":"<pre><code>public static class KeyValue&lt;K, V&gt; {\n    private K key;\n    private V value;\n\n    public KeyValue(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public K getKey() { return key; }\n    public V getValue() { return value; }\n    public void setKey(K key) { this.key = key; }\n    public void setValue(V value) { this.value = value; }\n}\n</code></pre>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#combining-e-k-and-v-in-a-multi-generic-class","title":"Combining <code>E</code>, <code>K</code>, and <code>V</code> in a Multi-Generic Class","text":"<pre><code>public static class MultiMap&lt;K, V, E&gt; {\n    private E extra;\n    private K key;\n    private V value;\n\n    public void put(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public K getKey() { return key; }\n    public V getValue() { return value; }\n    public E getExtra() { return extra; }\n    public void setKey(K key) { this.key = key; }\n    public void setValue(V value) { this.value = value; }\n    public void setExtra(E extra) { this.extra = extra; }\n}\n</code></pre>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#example-usage-in-main","title":"Example Usage in <code>main</code>","text":"<pre><code>// Generic Box that can hold String\nBox&lt;String&gt; stringBox = new Box&lt;&gt;();\nstringBox.setItem(\"Hello\");\nSystem.out.println(stringBox.getItem());\n\n// Use Integer as type parameter\nBox&lt;Integer&gt; integerBox = new Box&lt;&gt;();\nintegerBox.setItem(4321);\nSystem.out.println(integerBox.getItem());\n\n// Generic Method\nString[] names = { \"Alice\", \"Bob\" };\nInteger[] numbers = { 1, 2, 4 };\nUtility.printArray(names);\nUtility.printArray(numbers);\n\n// Generic Interface\nUtilisateur user = new Utilisateur();\nUserRepository userRepo = new UserRepository();\nuser.setId(0);\nuser.setUsername(\"Djaloud\");\nuserRepo.save(user);\nSystem.out.println(userRepo.findByIndex(0).getUsername());\n\n// Using Generics in Collections\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Hello\");\nSystem.out.println(list.get(0));\nSystem.out.println((String) list.get(0));\n\n// Using CustomList with E\nCustomList&lt;String&gt; customStringList = new CustomList&lt;&gt;();\ncustomStringList.setElement(\"Apple\");\ncustomStringList.setElement(\"Banana\");\n\nCustomList&lt;Integer&gt; customIntegerList = new CustomList&lt;&gt;();\ncustomIntegerList.setElement(20);\ncustomIntegerList.setElement(15);\nSystem.out.println(\"The price of an \" + customStringList.getElement(0) + \" is \" + customIntegerList.getElement(0));\n\n// KeyValue\nKeyValue&lt;Integer, String&gt; productPrice = new KeyValue&lt;&gt;(38500, \"ASUS ProArt 16\");\nSystem.out.println(\"The model \" + productPrice.getValue() + \" costs \" + productPrice.getKey() + \" MAD\");\n\nKeyValue&lt;String, Integer&gt; ageMapping = new KeyValue&lt;&gt;(\"Akmal Eddine\", 16);\nSystem.out.println(ageMapping.getKey() + \" is \" + ageMapping.getValue() + \" years old\");\n\n// MultiMap\nMultiMap&lt;String, Integer, String&gt; fruitInfo = new MultiMap&lt;&gt;();\nfruitInfo.put(\"Banana\", 10);\nfruitInfo.setExtra(\"imported from Morocco\");\nSystem.out.println(\"The \" + fruitInfo.getKey() + \" is \" + fruitInfo.getValue() + \" MAD and is \" + fruitInfo.getExtra());\n</code></pre>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#what-we-learned","title":"What We Learned","text":"<p>Java generics allow us to write flexible, type-safe code. In this post, we explored how generic interfaces and classes enhance reusability and improve readability. </p> <p>This reinforced our understanding of how Java Collections use generics under the hood, and how type erasure comes into play at runtime.</p> <p>The full Java file for this learning could be found here: GenericType.java</p>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#collateral-knowledge","title":"Collateral Knowledge","text":"<p>Collateral Knowledge</p> <p>Along the way, we also discovered two interesting aspects of OOP: </p> <ol> <li> <p>Interfaces inside classes are implicitly static.  If you're declaring an interface inside a class, you can make it <code>static</code> \u2014 and you usually should, to avoid holding an implicit reference to the outer class. Interfaces declared inside a class are implicitly static, meaning they can be used without creating an instance of the outer class. And that's an interesting and sometimes subtle aspect of Java!  Even if you don\u2019t explicitly use the static keyword, any interface declared inside a class is implicitly static by definition. This means you can reference it without creating an instance of the enclosing class, and it behaves independently of any specific instance of the outer class. An interface is implicitly <code>static</code> when declared inside a class. You don't need an instance of the outer class to use it.</p> </li> <li> <p>Classes can instantiate themselves (and it\u2019s totally valid) It's possible to instantiate a class from within itself in the <code>main</code> method (!like I'm creating this class, but I'm also instatiating this class in this class ... cool tho!) \u2014 something not usually needed but helpful when everything is enclosed in one file. Because we used a single Java class to contain all the examples, we had to reference generic classes and interfaces from within the same outer class. That\u2019s where we learned this pattern:</p> </li> </ol> <pre><code>public static void main(String[] args) {\n    // We need an instance of the outer class to access inner non-static classes\n    GenericType outerInstance = new GenericType();\n\n    Box&lt;String&gt; stringBox = outerInstance.new Box&lt;&gt;();\n    stringBox.setItem(\"Hello\");\n    System.out.println(stringBox.getItem());\n}\n</code></pre>","tags":["Generics","Type Safety","Interfaces"]},{"location":"blog/post/java/generic-types/#categories","title":"Categories","text":"<ul> <li>Java</li> <li>OOP</li> <li>Programming</li> </ul>","tags":["Generics","Type Safety","Interfaces"]},{"location":"databases/","title":"\ud83d\uddc3\ufe0f Databases","text":"<p>Welcome to the Databases section of Codelogium.</p> <p>Here you\u2019ll find posts about SQL, ORMs, in-memory databases, performance tips, and more \u2014 basically, everything I\u2019ve touched or struggled with on the data side.</p>"},{"location":"databases/#posts","title":"Posts","text":"<ul> <li> <p>Postgres vs H2: What to Use When A quick dive into when to use a full-fledged DB like Postgres vs a lightweight in-memory option like H2.</p> </li> <li> <p>Hibernate Tips I Wish I Knew Earlier Some practical tips for working with Hibernate without losing your sanity.</p> </li> </ul> <p>(More posts coming soon...)</p>"},{"location":"java/","title":"\u2615 Java","text":"<p>This is the Java corner of Codelogium \u2014 where I log things I\u2019ve explored, built, or broken in the Java universe.</p>"},{"location":"java/#posts","title":"Posts","text":"<ul> <li>Generic Types in Java \u201cWrite once, use many\u201d \u2014 Generics let you write flexible and reusable code.</li> </ul> <p>(More Java thoughts coming soon...)</p>"},{"location":"lab/","title":"\ud83e\uddea Lab","text":"<p>Welcome to the Lab \u2014 the playground of Codelogium.</p> <p>This is the space where theory meets practice.  Here, you\u2019ll find quick guides, cheatsheets, and hands-on examples designed to help you tackle real-world challenges. </p> <p>This is where I test, break, and rebuild. Expect practical deep dives, hands-on experiments, side projects, and explorations of tools like Git, Docker, CI/CD, and more.</p> <p>Whether you're looking for a fast reference or experimenting with new tools, the Lab is your go-to spot for practical knowledge.   Dive in, and start building!</p>"},{"location":"lab/#posts","title":"Posts","text":"<ul> <li> <p>Simple Crypto Portfolio Project A small project to track and display crypto holdings \u2014 mostly for fun, learning, and a bit of frontend/backend experimentation.</p> </li> <li> <p>Intro to Docker A crash course on containers, images, and why I finally stopped avoiding Docker.</p> </li> </ul> <p>(More experiments coming soon...) ```</p>"},{"location":"spring/","title":"\ud83c\udf31 Spring","text":"<p>Spring things live here \u2014 from security configs to REST tips and whatever else comes up while working with the Spring framework.</p>"},{"location":"spring/#posts","title":"Posts","text":"<ul> <li>JWT Authentication in Spring Step-by-step walkthrough of implementing JWT auth in a Spring Boot app.</li> </ul> <p>(More Spring experiments on the way...)</p>"},{"location":"spring/jwt-auth/","title":"JWT Auth","text":""},{"location":"spring/jwt-auth/#jwt-history","title":"JWT History","text":""},{"location":"categories/java/","title":"Category: Java","text":""},{"location":"categories/java/#pages-in-category-java","title":"Pages in category \"Java\"","text":"<ul> <li>Generic Types</li> </ul> <p>All Categories</p>"},{"location":"categories/programming/","title":"Category: Programming","text":""},{"location":"categories/programming/#pages-in-category-programming","title":"Pages in category \"Programming\"","text":"<ul> <li>Generic Types</li> </ul> <p>All Categories</p>"},{"location":"categories/oop/","title":"Category: OOP","text":""},{"location":"categories/oop/#pages-in-category-oop","title":"Pages in category \"OOP\"","text":"<ul> <li>Generic Types</li> </ul> <p>All Categories</p>"},{"location":"categories/","title":"All Categories","text":"<p>There are a total of 3 categories(s):</p> <ul> <li>Java (1)</li> <li>OOP (1)</li> <li>Programming (1)</li> </ul>"}]}